#!/usr/bin/env bash

COLORSCHEMES_PATH=~/.dotfiles/colorschemes
CURRENT_COLORSCHEME_PATH=~/.cache/current-colorscheme
WPG_WALLPAPERS_PATH=~/.config/wpg/wallpapers
USED_COLORSCHEMES_PATH=~/.config/colorschemes

usage()
{
  echo "Usage: themer [options] [--]

Options:
  -h                              Display this message
  -l                              List all available colorschemes
  -e {null|<name-of-colorscheme>} Exports the current colorscheme to ~/.dotfiles/colorschemes/. If the colorscheme has not been saved before, you must enter a name
  -i <path-to-image>              The path of the image to be used as wallpaper
  -c <name-of-colorscheme>        Uses the colorscheme saved in .dotfiles/colorschemes/ or creates a new one
  -s <saturation>                 Apply saturation to the generated colorscheme (0-1)
  "
  exit
}

get_filename()
{
  echo "${1##*/}"
}

list_colorschemes()
{
  echo "Available colorschemes:"
  for colorscheme in "$COLORSCHEMES_PATH"/*; do
    get_filename $colorscheme # Print the filename
    # Show a preview of the colorscheme
  done
  exit
}

escape_colorscheme_path()
{
  echo "${1%.*}"
}

save_selected_colorscheme()
{
  echo $1 > $CURRENT_COLORSCHEME_PATH
}

update_saved_colorscheme()
{
  selected_path=$(cat $CURRENT_COLORSCHEME_PATH)
  image_path=$(wpg -c)
  if [ -f "$selected_path" ]; then
    save_colorscheme $image_path $selected_path # Gets the current wallpaper from wpg and exports the colorscheme to dotfiles
  else
    if [ "$export_path" != "null" ]; then
      escaped_path=$(escape_colorscheme_path "$export_path")
      save_colorscheme $image_path "$COLORSCHEMES_PATH/$image_path"
    fi
  fi
}

save_colorscheme()
{
  wpg -o $1 $2
  sed -i "/wallpaper/d" $2
  save_selected_colorscheme $2
}

generate_colorscheme()
{
  echo "Generating colorscheme for $image"
  save_selected_colorscheme # Clears the current-colorscheme file, so that we dont overwrite colorschemes
  wpg_image_path=$WPG_WALLPAPERS_PATH/$(get_filename "$image")
  if [ -f "$wpg_image_path" ]; then
    wpg -d $wpg_image_path # Delete the cached colorscheme
  fi
  wpg -a $image # Create a new colosrcheme
  if [ ! -z "$saturation" ]; then
    wpg --sat $image $saturation
  fi
}

set_colorscheme()
{
  echo "Using colorscheme: $1"
  if [ -f $colorscheme_path ]; then
    wpg -a $image
    wpg -i $image $1
    save_selected_colorscheme $colorscheme_path
  else
    generate_colorscheme
    save_colorscheme $image $1
  fi

  echo "$image" > $used_colorscheme_path
}

apply_colorscheme()
{
  echo ""
  echo "Applying colorscheme"
  wpg -s "$1"
}

while getopts "hli:e:c:s::" opts; do
  case $opts in
    l)
      list_colorschemes
      ;;
    i)
      image=${OPTARG}
      if [ ! -f "$image" ]; then
        echo "Could not use specifed image: $image does not exist"
        exit
      fi
      ;;
    c)
      colorscheme=${OPTARG}
      ;;
    s)
      saturation=${OPTARG}
      ;;
    e)
      export_path=${OPTARG}
      update_saved_colorscheme
      exit
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

# If no args are given, show gallery of images from wallpaper repo
if [ -z "$image" ] && [ -z "$colorscheme" ]; then
  image=$(sxiv -t -o ~/repos/wallpapers/*)
  if [ ! -f "$image" ]; then
    echo "Could not use specifed image: $image does not exist"
    exit
  fi
fi

colorscheme_name="$(escape_colorscheme_path "$colorscheme").json"
colorscheme_path="$COLORSCHEMES_PATH/$colorscheme_name"
used_colorscheme_path="$USED_COLORSCHEMES_PATH/${colorscheme_name}"

if [ ! -z "$image" ]; then
  if [ -z "$colorscheme" ]; then
    generate_colorscheme
  else
    set_colorscheme $colorscheme_path
  fi

  # Apply the wallpaper
  apply_colorscheme "$image"
else
  if [ -f "$colorscheme_path" ]; then
    if [ ! -d "$USED_COLORSCHEMES_PATH" ]; then
      mkdir $USED_COLORSCHEMES_PATH
    fi

    if [ -f $used_colorscheme_path ]; then
      wall=$(cat $used_colorscheme_path)
      # If the wallpaper set in the saved colorscheme, update the colorscheme using wpg
      if [ -f "$wall" ]; then
        # Apply the wallpaper with the specified colorscheme
        apply_colorscheme "$wall"
        save_selected_colorscheme $colorscheme_path
      else
        echo "The wallpaper set in $used_colorscheme_path does not exist:"
        echo "$wall"
        echo " "
        echo "To fix this, update the path to the image used by this colorscheme using:"
        echo "themer -i <path-to-image> -c $colorscheme"
      fi
    else
      echo "You have not set a wallpaper to use with this colorscheme."
      echo ""
      echo "To fix this, set the path to the wallpaper and assign it to the colorscheme using:"
      echo "themer -i <path-to-image> -c $colorscheme"
    fi
  else
    echo "Could not find colorscheme: $colorscheme"
    echo " "
    list_colorschemes
  fi
fi
